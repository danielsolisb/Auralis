# Generated by Django 4.2 on 2025-09-12 18:01

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('sensorhub', '0009_sensor_ip_address_sensor_mqtt_topic_sensor_port_and_more'),
        ('users', '0002_user_profile_image'),
    ]

    operations = [
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Un nombre descriptivo para la condición. Ej: Temp > 80°C', max_length=150, verbose_name='nombre de la condición')),
                ('metric_to_evaluate', models.CharField(choices=[('VALUE', 'Valor Actual'), ('ROC', 'Ritmo de Cambio (valor/tiempo)')], default='VALUE', max_length=10, verbose_name='métrica a evaluar')),
                ('operator', models.CharField(choices=[('>', 'Mayor que'), ('<', 'Menor que'), ('==', 'Igual a'), ('BETWEEN', 'Entre'), ('NOT_BETWEEN', 'Fuera de')], default='>', max_length=15, verbose_name='operador de comparación')),
                ('threshold_config', models.JSONField(default=dict, help_text="Valores de umbral en formato JSON. Ej: {'type': 'STATIC', 'value': 30} o {'type': 'TIME_BASED', 'weekday_value': 25, 'weekend_value': 28}", verbose_name='configuración de umbrales')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('source_sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conditions', to='sensorhub.sensor', verbose_name='sensor de origen')),
            ],
            options={
                'verbose_name': 'condición',
                'verbose_name_plural': 'condiciones',
            },
        ),
        migrations.CreateModel(
            name='Rule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Un nombre descriptivo y único para la regla.', max_length=200, verbose_name='nombre de la regla')),
                ('description', models.TextField(blank=True, help_text='Una explicación detallada de lo que esta regla detecta.', verbose_name='descripción')),
                ('severity', models.CharField(choices=[('INFO', 'Informativo'), ('WARNING', 'Advertencia'), ('CRITICAL', 'Crítico')], default='WARNING', help_text='La severidad de la alerta que se generará si la regla se cumple.', max_length=10, verbose_name='severidad')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Desmarque esta opción para desactivar la regla sin eliminarla.', verbose_name='activa')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='fecha de creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='última actualización')),
                ('company', models.ForeignKey(help_text='La empresa a la que pertenece esta regla.', on_delete=django.db.models.deletion.CASCADE, related_name='rules', to='users.company', verbose_name='empresa')),
            ],
            options={
                'verbose_name': 'regla avanzada',
                'verbose_name_plural': 'reglas avanzadas',
                'ordering': ['company', 'name'],
                'unique_together': {('company', 'name')},
            },
        ),
        migrations.CreateModel(
            name='RuleNode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('node_type', models.CharField(choices=[('COND', 'Condición'), ('OP', 'Operador Lógico')], max_length=4, verbose_name='tipo de nodo')),
                ('logical_operator', models.CharField(blank=True, choices=[('AND', 'Y (todas las sub-condiciones deben ser verdaderas)'), ('OR', 'O (al menos una sub-condición debe ser verdadera)')], max_length=3, null=True, verbose_name='operador lógico')),
                ('condition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='rulesengine.condition', verbose_name='condición vinculada')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='rulesengine.rulenode', verbose_name='nodo padre')),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nodes', to='rulesengine.rule', verbose_name='regla')),
            ],
            options={
                'verbose_name': 'nodo de regla',
                'verbose_name_plural': 'nodos de regla',
            },
        ),
    ]
